# -*- coding: utf-8 -*-
"""Classification.ipynb
"""

!pip uninstall h5py
!pip install h5py==2.10.0
!pip install q tensorflow==2.1
!pip install q keras==2.3.1
!pip3 install keras-nightly
!pip3 uninstall keras-nightly

from numpy import linalg as LA
import numpy as np
import random,math 
from scipy import fftpack
from numpy.random import choice
from scipy.fftpack import dct, idct
import cvxpy as cp
from keras.utils import np_utils
import os.path
import tensorflow
from tensorflow import keras
import numpy as np
from tensorflow.keras import backend as K
from tensorflow.keras.models import load_model
from tensorflow.keras.datasets import mnist
import matplotlib.pyplot as plt
from tensorflow.keras import backend
from tensorflow.keras.models import load_model, Sequential
from tensorflow.keras.layers import Dense, Dropout, Flatten
from tensorflow.keras.layers import Conv2D, MaxPooling2D
import matplotlib.pyplot as plt
from __future__ import print_function
from __future__ import print_function

from google.colab import drive
drive.mount('/content/drive')

backend.set_learning_phase(False)
model = tensorflow.keras.models.load_model('Path to Model trained with clean reconstructed and compressed images')

# Load your dataset MNIST/Cifar10
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
y_train=np.reshape(y_train,(60000))
y_test=np.reshape(y_test,(10000))

# Checking Without Reconstruction Adversarial Images for example FGSM

f_np = 'path where adversarial images of FGSM are kept'
fgsm=np.load(f_np)
fgsm= fgsm.reshape(fgsm.shape[0], 28, 28, 1)
print(fgsm.shape[0])
f_ind = 'Indices of Adversarial Images '
ind=np.load(f_ind)
y_test_recon_fgsm=np.zeros(fgsm.shape[0])
z=0
for i in range(fgsm.shape[0]):
      y_test_recon_fgsm[z]=y_test[ind[i]]
      z+=1
score = model.evaluate(fgsm, np_utils.to_categorical(y_test_recon_fgsm, 10), verbose=0)
print('\n FGSM Accuracy without reconstruction')
print('\nTest loss:', score[0])
print('\nTest accuracy:', score[1])

# Now evaluating our proposed defense against any attack for example FGSM


f_np = 'path where reconstructed and compressed images generated by after applying proposed defense of FGSM attack are kept'
fgsm=np.load(f_np)
fgsm= fgsm.reshape(fgsm.shape[0], 28, 28, 1)
print(fgsm.shape[0])
f_ind='Indices of Adversarial Images '
ind=np.load(f_ind)
y_test_recon_fgsm=np.zeros(fgsm.shape[0])
z=0
for i in range(1000,1800):
      y_test_recon_fgsm[z]=y_test[ind[i]]
      z+=1
score = model.evaluate(fgsm, np_utils.to_categorical(y_test_recon_fgsm, 10), verbose=0)
print('\n FGSM Accuracy')
print('\nTest loss:', score[0])
print('\nTest accuracy:', score[1])